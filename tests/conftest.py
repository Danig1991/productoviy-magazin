import logging
import os
from datetime import datetime

import pytest

from pages.authorization_page import AuthorizationPage
from pages.fixed_navigation_bar.fixed_panel_icons import FixedPanelIcons
from pages.products_page import ProductsPage
from pages.shopping_cart_page import ShoppingCartPage
from utils.browser import Browser
from utils.config import AuthConfig, Url, ProductConfig


# –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def conf_authorization(login: str = None, password: str = None, text_authorization: str = None):
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    browser = Browser(browser_type="chrome")
    browser.open(url=Url.BASE_URL)
    driver = browser.driver

    logging.info(text_authorization)
    # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    authorization_page = AuthorizationPage(driver)
    authorization_page.enter_login(login)
    authorization_page.enter_password(password)
    authorization_page.click_the_login_button()

    return browser, driver


# –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@pytest.fixture
def admin_auth():
    browser, driver = conf_authorization(
        AuthConfig.ADMIN_LOGIN,
        AuthConfig.ADMIN_PASSWORD,
        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )
    # –ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
    yield driver
    # –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    browser.quit()


# –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
@pytest.fixture
def shopper_auth():
    browser, driver = conf_authorization(
        AuthConfig.SHOPPER_LOGIN,
        AuthConfig.SHOPPER_PASSWORD,
        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º."
    )
    # –ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
    yield driver
    # –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    browser.quit()


# –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@pytest.fixture(scope="function")
def none_auth():
    browser, driver = conf_authorization(
        text_authorization="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    )
    # –ø–µ—Ä–µ–¥–∞—á–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
    yield driver
    # –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    browser.quit()


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 2 —à—Ç.
@pytest.fixture(scope="function")
def add_two_products(shopper_auth):
    driver = shopper_auth
    ProductsPage(driver).set_product_quantity(
        product_name=ProductConfig.PRODUCT_NAME,
        target_quantity=ProductConfig.QUANTITY_2
    )


# –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
@pytest.fixture(scope="function")
def go_to_cart(shopper_auth):
    driver = shopper_auth
    FixedPanelIcons(driver).click_shopping_cart()


# –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@pytest.fixture(scope="function")
def go_to_checkout_user_data(shopper_auth):
    driver = shopper_auth
    ShoppingCartPage(driver).click_button_place_order()


# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
def pytest_configure():
    # –æ—Ç–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏ WebDriver Manager
    os.environ['WDM_LOG'] = str(0)
    # —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
    os.makedirs("logs", exist_ok=True)
    # –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
    file_name = f"logs/log_{datetime.now().strftime('%Y-%m-%d_%H.%M.%S')}.log"

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] \t%(message)s',
        datefmt='%H:%M:%S',
        handlers=[logging.FileHandler(file_name, mode='a', encoding='utf-8')]
    )


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
test_results = {}


# —Ö—É–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(call):
    outcome = yield
    report = outcome.get_result()

    if report.when == "call":
        test_results["outcome"] = report.outcome
        if report.failed:
            # –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = str(call.excinfo.typename) + ": " + str(call.excinfo.value).split('\n')[0]
            logging.error(f"‚ö†Ô∏è {error_message}")


# —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
@pytest.fixture(autouse=True)
def auto_log_test(request: pytest.FixtureRequest):
    # –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
    test_name = request.node.name
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ '{test_name}'")
    start_time = datetime.now()

    yield

    # —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    outcome = test_results["outcome"]
    if outcome == "passed":
        logging.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—Ö–æ–º")
    elif outcome == "failed":
        logging.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ")
    else:
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {outcome}")

    # –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
    end_time = datetime.now()
    duration = end_time - start_time
    logging.info(f"‚åõ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {duration.total_seconds():.2f} —Å–µ–∫—É–Ω–¥\n" +
                 f"{"=" * 35} {outcome.upper()} {"=" * 35}\n")
